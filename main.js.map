{"version":3,"sources":["main.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length",1,"module","update","dbs","formatElapsed","v","str","parseFloat","toFixed","minutes","Math","floor","comps","split","seconds","ms","labelClass","count","elapsedClass","render","elementOpen","TABLE_STATICS","db","topFiveQueries","getTopFiveQueries","queries","id","DBNAME_STATICS","text","name","elementClose","QC_STATICS","j","q","elapsed","POPOVER_STATICS","POPOVER_CONTENT_STATICS","query","POPOVER_ARROW_STATICS","main","domUpdate","patch","document","body","requestAnimationFrame","N","push","data","Database","setInterval","I","IncrementalDOM","elementVoid","addEventListener","./data","incremental-dom",2,"elements","elementOpenStart","elementOpenEnd","attr","./src/patch","./src/virtual_elements",3,"nodes","createNode","getKey","getNodeName","getChild","registerChild","markVisited","getWalker","matches","node","nodeName","key","alignWithDOM","statics","matchingNode","walker","currentNode","parent","getCurrentParent","existingNode","doc","insertBefore","./nodes","./traversal","./walker",4,"getData","applyAttr","el","value","attrs","type","undefined","removeAttribute","setAttribute","applyStyle","style","String","cssText","prop","updateAttribute","className","tabIndex","./node_data",5,"NodeData","this","attrsArr","newAttrs","keyMap","lastVisitedChild","initData","toLowerCase","Element","getAttribute",6,"nodeData","createElement","tag","createTextNode","createKeyMap","map","children","child","getKeyMap","./attributes",7,"traversal","firstChild","parentNode","TreeWalker","setWalker","fn","prevWalker","./tree_walker",8,"enterNode","exitNode","lastChild","removeChild","nextSibling",9,"stack_","ownerDocument","prototype","pop",10,"ATTRIBUTES_OFFSET","argsBuilder","hasChangedAttrs","unused1","unused2","unused3","var_args","attrsChanged","arguments","updateNewAttrs","updateAttributes","apply","./alignment",11,"walker_",12,"Query","waiting","_nextId","rand","random","qs","slice","sort","b"],"mappings":"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","file":"main.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n'use strict';\n\nvar I = 0;\nvar N = 100;\n\nvar IncrementalDOM = require('incremental-dom');\nvar elementOpen = IncrementalDOM.elementOpen;\nvar elementClose = IncrementalDOM.elementClose;\nvar elementVoid = IncrementalDOM.elementVoid;\nvar text = IncrementalDOM.text;\nvar patch = IncrementalDOM.patch;\n\nvar data = require('./data');\n\nfunction update(dbs) {\n  for (var i = 0; i < dbs.length; i++) {\n    dbs[i].update();\n  }\n}\n\nfunction formatElapsed(v) {\n  if (!v) return '';\n\n  var str = parseFloat(v).toFixed(2);\n\n  if (v > 60) {\n    var minutes = Math.floor(v / 60);\n    var comps = (v % 60).toFixed(2).split('.');\n    var seconds = comps[0];\n    var ms = comps[1];\n    str = minutes + \":\" + seconds + \".\" + ms;\n  }\n\n  return str;\n}\n\nfunction labelClass(count) {\n  if (count >= 20) {\n    return 'label label-important';\n  } else if (count >= 10) {\n    return 'label label-warning';\n  }\n  return 'label label-success';\n}\n\nfunction elapsedClass(t) {\n  if (t >= 10.0) {\n    return 'Query elapsed warn_long';\n  } else if (t >= 1.0) {\n    return 'Query elapsed warn';\n  }\n  return 'Query elapsed short';\n}\n\nvar TABLE_STATICS = ['class', 'table table-striped table-latest-data'];\nvar DBNAME_STATICS = ['class', 'dbname'];\nvar QC_STATICS = ['class', 'query-count'];\nvar POPOVER_STATICS = ['class', 'popover left'];\nvar POPOVER_CONTENT_STATICS = ['class', 'popover-content'];\nvar POPOVER_ARROW_STATICS = ['class', 'arrow'];\n\nfunction render(dbs) {\n  elementOpen('table', null, TABLE_STATICS);\n  elementOpen('tbody');\n  for (var i = 0; i < dbs.length; i++) {\n    var db = dbs[i];\n    var topFiveQueries = db.getTopFiveQueries();\n    var count = db.queries.length;\n\n    elementOpen('tr', db.id);\n\n    // name\n    elementOpen('td', null, DBNAME_STATICS);\n    text(db.name);\n    elementClose('td');\n\n    // count\n    elementOpen('td', null, QC_STATICS);\n    elementOpen('span', null, null,\n                'class', labelClass(count));\n    text(count);\n    elementClose('span');\n    elementClose('td');\n\n    // queries\n    for (var j = 0; j < 5; j++) {\n      var q = topFiveQueries[j];\n      var elapsed = q.elapsed;\n      elementOpen('td', null, null,\n                  'class', elapsedClass(elapsed));\n      text(formatElapsed(elapsed));\n\n      elementOpen('div', null, POPOVER_STATICS);\n      elementOpen('div', null, POPOVER_CONTENT_STATICS);\n      text(q.query);\n      elementClose('div');\n\n      elementOpen('div', null, POPOVER_ARROW_STATICS);\n      elementClose('div');\n      elementClose('div');\n\n      elementClose('td');\n    }\n    elementClose('tr');\n  }\n  elementClose('tbody');\n  elementClose('table');\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  main();\n});\n\nfunction main() {\n  var dbs = [];\n  for (var i = 0; i < N; i++) {\n    dbs.push(new data.Database('cluster' + i));\n    dbs.push(new data.Database('cluster' + i + 'slave'));\n  }\n\n  setInterval(function() {\n    update(dbs);\n  }, I);\n\n  function domUpdate() {\n    patch(document.body, function() {\n      render(dbs);\n    });\n    requestAnimationFrame(domUpdate);\n  }\n  domUpdate();\n}\n\n},{\"./data\":12,\"incremental-dom\":2}],2:[function(require,module,exports){\n/**\n * @license\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar patch = require('./src/patch').patch;\nvar elements = require('./src/virtual_elements');\n\nmodule.exports = {\n  patch: patch,\n  elementVoid: elements.elementVoid,\n  elementOpenStart: elements.elementOpenStart,\n  elementOpenEnd: elements.elementOpenEnd,\n  elementOpen: elements.elementOpen,\n  elementClose: elements.elementClose,\n  text: elements.text,\n  attr: elements.attr\n};\n\n\n},{\"./src/patch\":7,\"./src/virtual_elements\":10}],3:[function(require,module,exports){\n/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar nodes = require('./nodes'),\n    createNode = nodes.createNode,\n    getKey = nodes.getKey,\n    getNodeName = nodes.getNodeName,\n    getChild = nodes.getChild,\n    registerChild = nodes.registerChild;\nvar markVisited = require('./traversal').markVisited;\nvar getWalker = require('./walker').getWalker;\n\n\n/**\n * Checks whether or not a given node matches the specified nodeName and key.\n *\n * @param {?Node} node An HTML node, typically an HTMLElement or Text.\n * @param {?string} nodeName The nodeName for this node.\n * @param {?string} key An optional key that identifies a node.\n * @return {boolean} True if the node matches, false otherwise.\n */\nvar matches = function(node, nodeName, key) {\n  return node &&\n         key === getKey(node) &&\n         nodeName === getNodeName(node);\n};\n\n\n/**\n * Aligns the virtual Element definition with the actual DOM, moving the\n * corresponding DOM node to the correct location or creating it if necessary.\n * @param {?string} nodeName For an Element, this should be a valid tag string.\n *     For a Text, this should be #text.\n * @param {?string} key The key used to identify this element.\n * @param {?Array<*>|string} statics For an Element, this should be an array of\n *     name-value pairs. For a Text, this should be the text content of the\n *     node.\n * @return {!Node} The matching node.\n */\nvar alignWithDOM = function(nodeName, key, statics) {\n  var walker = getWalker();\n  var currentNode = walker.currentNode;\n  var parent = walker.getCurrentParent();\n  var matchingNode;\n\n  // Check to see if we have a node to reuse\n  if (matches(currentNode, nodeName, key)) {\n    matchingNode = currentNode;\n  } else {\n    var existingNode = key && getChild(parent, key);\n\n    // Check to see if the node has moved within the parent or if a new one\n    // should be created\n    if (existingNode) {\n      matchingNode = existingNode;\n    } else {\n      matchingNode = createNode(walker.doc, nodeName, key, statics);\n      registerChild(parent, key, matchingNode);\n    }\n\n    parent.insertBefore(matchingNode, currentNode);\n    walker.currentNode = matchingNode;\n  }\n\n  markVisited(parent, matchingNode);\n\n  return matchingNode;\n};\n\n\n/** */\nmodule.exports = {\n  alignWithDOM: alignWithDOM\n};\n\n\n},{\"./nodes\":6,\"./traversal\":8,\"./walker\":11}],4:[function(require,module,exports){\n/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar getData = require('./node_data').getData;\n\n\n/**\n * Applies an attribute or property to a given Element. If the value is a object\n * or a function (which includes null), it is set as a property on the Element.\n * Otherwise, the value is set as an attribute.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value. If the value is a string, it is set\n *     as an HTML attribute, otherwise, it is set on node.\n */\nvar applyAttr = function(el, name, value) {\n  var data = getData(el);\n  var attrs = data.attrs;\n\n  if (attrs[name] === value) {\n    return;\n  }\n\n  var type = typeof value;\n\n  if (value === undefined) {\n    el.removeAttribute(name);\n  } else if (type === 'object' || type === 'function') {\n    el[name] = value;\n  } else {\n    el.setAttribute(name, value);\n  }\n\n  attrs[name] = value;\n};\n\n\n/**\n * Applies a style to an Element. No vendor prefix expansion is done for\n * property names/values.\n * @param {!Element} el\n * @param {string|Object<string,string>} style The style to set. Either a string\n *     of css or an object containing property-value pairs.\n */\nvar applyStyle = function(el, style) {\n  if (typeof style === 'string' || style instanceof String) {\n    el.style.cssText = style;\n  } else {\n    el.style.cssText = '';\n\n    for (var prop in style) {\n      el.style[prop] = style[prop];\n    }\n  }\n};\n\n\n/**\n * Updates a single attribute on an Element. For some types (e.g. id or class),\n * the value is applied directly to the Element using the corresponding accessor\n * function.\n * @param {!Element} el\n * @param {string} name The attribute's name.\n * @param {*} value The attribute's value. If the value is a string, it is set\n *     as an HTML attribute, otherwise, it is set on node.\n */\nvar updateAttribute = function(el, name, value) {\n  switch (name) {\n    case 'id':\n      el.id = value;\n      break;\n    case 'class':\n      el.className = value;\n      break;\n    case 'tabindex':\n      el.tabIndex = value;\n      break;\n    case 'style':\n      applyStyle(el, value);\n      break;\n    default:\n      applyAttr(el, name, value);\n      break;\n  }\n};\n\n\n/** */\nmodule.exports = {\n  updateAttribute: updateAttribute\n};\n\n\n},{\"./node_data\":5}],5:[function(require,module,exports){\n/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/**\n * Keeps track of information needed to perform diffs for a given DOM node.\n * @param {?string} nodeName\n * @param {?string} key\n * @constructor\n */\nfunction NodeData(nodeName, key) {\n  /**\n   * The attributes and their values.\n   * @const\n   */\n  this.attrs = {};\n\n  /**\n   * An array of attribute name/value pairs, used for quickly diffing the\n   * incomming attributes to see if the DOM node's attributes need to be\n   * updated.\n   * @const {Array<*>}\n   */\n  this.attrsArr = [];\n\n  /**\n   * The incoming attributes for this Node, before they are updated.\n   * @const {!Object<string, *>}\n   */\n  this.newAttrs = {};\n\n  /**\n   * The key used to identify this node, used to preserve DOM nodes when they\n   * move within their parent.\n   * @const\n   */\n  this.key = key;\n\n  /**\n   * Keeps track of children within this node by their key.\n   * {?Object<string, Node>}\n   */\n  this.keyMap = null;\n\n  /**\n   * The last child to have been visited within the current pass.\n   * {?Node}\n   */\n  this.lastVisitedChild = null;\n\n  /**\n   * The node name for this node.\n   * @const\n   */\n  this.nodeName = nodeName;\n\n  /**\n   * @const {string}\n   */\n  this.text = null;\n}\n\n\n/**\n * Initializes a NodeData object for a Node.\n *\n * @param {!Node} node The node to initialze data for.\n * @param {string} nodeName The node name of node.\n * @param {?string} key The key that identifies the node.\n * @return {!NodeData} The newly initialized data object\n */\nvar initData = function(node, nodeName, key) {\n  var data = new NodeData(nodeName, key);\n  node['__incrementalDOMData'] = data;\n  return data;\n};\n\n\n/**\n * Retrieves the NodeData object for a Node, creating it if necessary.\n *\n * @param {!Node} node The node to retrieve the data for.\n * @return {NodeData} The NodeData for this Node.\n */\nvar getData = function(node) {\n  var data = node['__incrementalDOMData'];\n\n  if (!data) {\n    var nodeName = node.nodeName.toLowerCase();\n    var key = null;\n\n    if (node instanceof Element) {\n      key = node.getAttribute('key');\n    }\n\n    data = initData(node, nodeName, key);\n  }\n\n  return data;\n};\n\n\n/** */\nmodule.exports = {\n  getData: getData,\n  initData: initData\n};\n\n\n},{}],6:[function(require,module,exports){\n/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar updateAttribute = require('./attributes').updateAttribute;\nvar nodeData = require('./node_data'),\n    getData = nodeData.getData,\n    initData = nodeData.initData;\n\n\n/**\n * Creates an Element.\n * @param {!Document} doc The document with which to create the Element.\n * @param {string} tag The tag for the Element.\n * @param {?string} key A key to identify the Element.\n * @param {?Array<*>} statics An array of attribute name/value pairs of\n *     the static attributes for the Element.\n * @return {!Element}\n */\nvar createElement = function(doc, tag, key, statics) {\n  var el = doc.createElement(tag);\n  initData(el, tag, key);\n\n  if (statics) {\n    for (var i = 0; i < statics.length; i += 2) {\n      updateAttribute(el, statics[i], statics[i + 1]);\n    }\n  }\n\n  return el;\n};\n\n/**\n * Creates a Text.\n * @param {!Document} doc The document with which to create the Text.\n * @param {string} text The intial content of the Text.\n * @return {!Text}\n */\nvar createTextNode = function(doc, text) {\n  var node = doc.createTextNode(text);\n  getData(node).text = text;\n\n  return node;\n};\n\n\n/**\n * Creates a Node, either a Text or an Element depending on the node name\n * provided.\n * @param {!Document} doc The document with which to create the Node.\n * @param {string} nodeName The tag if creating an element or #text to create\n *     a Text.\n * @param {?string} key A key to identify the Element.\n * @param {?Array<*>|string} statics The static data to initialize the Node\n *     with. For an Element, an array of attribute name/value pairs of\n *     the static attributes for the Element. For a Text, a string with the\n *     intial content of the Text.\n * @return {!Node}\n */\nvar createNode = function(doc, nodeName, key, statics) {\n  if (nodeName === '#text') {\n    return createTextNode(doc, statics);\n  }\n\n  return createElement(doc, nodeName, key, statics);\n};\n\n\n/**\n * Creates a mapping that can be used to look up children using a key.\n * @param {!Element} el\n * @return {!Object<string, !Node>} A mapping of keys to the children of the\n *     Element.\n */\nvar createKeyMap = function(el) {\n  var map = {};\n  var children = el.children;\n  var count = children.length;\n\n  for (var i = 0; i < count; i += 1) {\n    var child = children[i];\n    var key = getKey(child);\n\n    if (key) {\n      map[key] = child;\n    }\n  }\n\n  return map;\n};\n\n\n/**\n * @param {?Node} node A node to get the key for.\n * @return {?string} The key for the Node, if applicable.\n */\nvar getKey = function(node) {\n  return getData(node).key;\n};\n\n\n/**\n * @param {?Node} node A node to get the node name for.\n * @return {?string} The node name for the Node, if applicable.\n */\nvar getNodeName = function(node) {\n  return getData(node).nodeName;\n};\n\n\n/**\n * Retrieves the mapping of key to child node for a given Element, creating it\n * if necessary.\n * @param {!Element} el\n * @return {!Object<string,!Node>} A mapping of keys to child Nodes\n */\nvar getKeyMap = function(el) {\n  var data = getData(el);\n\n  if (!data.keyMap) {\n    data.keyMap = createKeyMap(el);\n  }\n\n  return data.keyMap;\n};\n\n\n/**\n * Retrieves a child from the parent with the given key.\n * @param {!Element} parent\n * @param {?string} key\n * @return {?Node} The child corresponding to the key.\n */\nvar getChild = function(parent, key) {\n  return getKeyMap(parent)[key];\n};\n\n\n/**\n * Registers a node as being a child. If a key is provided, the parent will\n * keep track of the child using the key. The child can be retrieved using the\n * same key using getKeyMap. The provided key should be unique within the\n * parent Element.\n * @param {!Element} parent The parent of child.\n * @param {?string} key A key to identify the child with.\n * @param {!Node} child The child to register.\n */\nvar registerChild = function(parent, key, child) {\n  if (key) {\n    getKeyMap(parent)[key] = child;\n  }\n};\n\n\n/** */\nmodule.exports = {\n  createNode: createNode,\n  getKey: getKey,\n  getNodeName: getNodeName,\n  getChild: getChild,\n  registerChild: registerChild\n};\n\n\n},{\"./attributes\":4,\"./node_data\":5}],7:[function(require,module,exports){\n/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar traversal = require('./traversal'),\n    firstChild = traversal.firstChild,\n    parentNode = traversal.parentNode;\nvar TreeWalker = require('./tree_walker');\nvar walker = require('./walker'),\n    getWalker = walker.getWalker,\n    setWalker = walker.setWalker;\n\n\n/**\n * Patches the document starting at el with the provided function. This function\n * may be called during an existing patch operation.\n * @param {!Element} el the element to patch\n * @param {!function} fn A function containing elementOpen/elementClose/etc.\n *     calls that describe the DOM.\n */\nvar patch = function(el, fn) {\n  var prevWalker = getWalker();\n  setWalker(new TreeWalker(el));\n\n  firstChild();\n  fn();\n  parentNode();\n\n  setWalker(prevWalker);\n};\n\n\n/** */\nmodule.exports = {\n  patch: patch\n};\n\n\n},{\"./traversal\":8,\"./tree_walker\":9,\"./walker\":11}],8:[function(require,module,exports){\n/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar getWalker = require('./walker').getWalker;\nvar getData = require('./node_data').getData;\n\n\n/**\n * Enters a Element, clearing out the last visited child field.\n * @param {!Element} node\n */\nvar enterNode = function(node) {\n  var data = getData(node);\n  data.lastVisitedChild = null;\n};\n\n\n/**\n * Clears out any unvisited Nodes, as the corresponding virtual element\n * functions were never called for them.\n * @param {!Element} node\n */\nvar exitNode = function(node) {\n  var data = getData(node);\n  var lastVisitedChild = data.lastVisitedChild;\n\n  if (node.lastChild === lastVisitedChild) {\n    return;\n  }\n\n  while (node.lastChild !== lastVisitedChild) {\n    node.removeChild(node.lastChild);\n  }\n\n  // Invalidate the key map since we removed children. It will get recreated\n  // next time we need it.\n  data.keyMap = null;\n};\n\n\n/**\n * Marks a parent as having visited a child.\n * @param {!Element} parent\n * @param {!Node} child\n */\nvar markVisited = function(parent, child) {\n  var data = getData(parent);\n  data.lastVisitedChild = child;\n};\n\n\n/**\n * Changes to the first child of the current node.\n */\nvar firstChild = function() {\n  var walker = getWalker();\n  enterNode(walker.currentNode);\n  walker.firstChild();\n};\n\n\n/**\n * Changes to the next sibling of the current node.\n */\nvar nextSibling = function() {\n  var walker = getWalker();\n  walker.nextSibling();\n};\n\n\n/**\n * Changes to the parent of the current node, removing any unvisited children.\n */\nvar parentNode = function() {\n  var walker = getWalker();\n  walker.parentNode();\n  exitNode(walker.currentNode);\n};\n\n\n/** */\nmodule.exports = {\n  firstChild: firstChild,\n  nextSibling: nextSibling,\n  parentNode: parentNode,\n  markVisited: markVisited\n};\n\n\n},{\"./node_data\":5,\"./walker\":11}],9:[function(require,module,exports){\n/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Similar to the built-in Treewalker class, but simplified and allows direct\n * access to modify the currentNode property.\n * @param {!Node} node The root Node of the subtree the walker should start\n *     traversing.\n * @constructor\n */\nfunction TreeWalker(node) {\n  /**\n   * Keeps track of the current parent node. This is necessary as the traversal\n   * methods may traverse past the last child and we still need a way to get\n   * back to the parent.\n   * @const @private {!Array<!Node>}\n   */\n  this.stack_ = [];\n\n  /** {?Node} */\n  this.currentNode = node;\n\n  /** {!Document} */\n  this.doc = node.ownerDocument;\n}\n\n\n/**\n * @return {!Node} The current parent of the current location in the subtree.\n */\nTreeWalker.prototype.getCurrentParent = function() {\n  return this.stack_[this.stack_.length - 1];\n};\n\n\n/**\n * Changes the current location the firstChild of the current location.\n */\nTreeWalker.prototype.firstChild = function() {\n  this.stack_.push(this.currentNode);\n  this.currentNode = this.currentNode.firstChild;\n};\n\n\n/**\n * Changes the current location the nextSibling of the current location.\n */\nTreeWalker.prototype.nextSibling = function() {\n  this.currentNode = this.currentNode.nextSibling;\n};\n\n\n/**\n * Changes the current location the parentNode of the current location.\n */\nTreeWalker.prototype.parentNode = function() {\n  this.currentNode = this.stack_.pop();\n};\n\n\n/** */\nmodule.exports = TreeWalker;\n\n\n},{}],10:[function(require,module,exports){\n/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nvar alignWithDOM = require('./alignment').alignWithDOM;\nvar updateAttribute = require('./attributes').updateAttribute;\nvar getData = require('./node_data').getData;\nvar getWalker = require('./walker').getWalker;\nvar traversal = require('./traversal'),\n    firstChild = traversal.firstChild,\n    nextSibling = traversal.nextSibling,\n    parentNode = traversal.parentNode;\n\n\n/**\n * The offset in the virtual element declaration where the attributes are\n * specified.\n * @const\n */\nvar ATTRIBUTES_OFFSET = 3;\n\n\n/**\n * Builds an array of arguments for use with elementOpenStart, attr and\n * elementOpenEnd.\n * @type {Array<*>}\n * @const\n */\nvar argsBuilder = [];\n\n\nif (\"production\" !== 'production') {\n  /**\n   * Keeps track whether or not we are in an attributes declaration (after\n   * elementOpenStart, but before elementOpenEnd).\n   * @type {boolean}\n   */\n  var inAttributes = false;\n\n\n  /** Makes sure that the caller is not where attributes are expected. */\n  var assertNotInAttributes = function() {\n    if (inAttributes) {\n      throw new Error('Was not expecting a call to attr or elementOpenEnd, ' +\n          'they must follow a call to elementOpenStart.');\n    }\n  };\n\n\n  /** Makes sure that the caller is where attributes are expected. */\n  var assertInAttributes = function() {\n    if (!inAttributes) {\n      throw new Error('Was expecting a call to attr or elementOpenEnd. ' +\n          'elementOpenStart must be followed by zero or more calls to attr, ' +\n          'then one call to elementOpenEnd.');\n    }\n  };\n\n\n  /** Updates the state to being in an attribute declaration. */\n  var setInAttributes = function() {\n    inAttributes = true;\n  };\n\n\n  /** Updates the state to not being in an attribute declaration. */\n  var setNotInAttributes = function() {\n    inAttributes = false;\n  };\n}\n\n\n/**\n * Checks to see if one or more attributes have changed for a given\n * Element. When no attributes have changed, this function is much faster than\n * checking each individual argument. When attributes have changed, the overhead\n * of this function is minimal.\n *\n * This function is called in the context of the Element and the arguments from\n * elementOpen-like function so that the arguments are not de-optimized.\n *\n * @this {Element} The Element to check for changed attributes.\n * @param {*} unused1\n * @param {*} unused2\n * @param {*} unused3\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {boolean} True if the Element has one or more changed attributes,\n *     false otherwise.\n */\nvar hasChangedAttrs = function(unused1, unused2, unused3, var_args) {\n  var data = getData(this);\n  var attrsArr = data.attrsArr;\n  var attrsChanged = false;\n  var i;\n\n  for (i = ATTRIBUTES_OFFSET; i < arguments.length; i += 2) {\n    // Translate the from the arguments index (for values) to the attribute's\n    // ordinal. The attribute values are at arguments index 3, 5, 7, etc. To get\n    // the ordinal, need to subtract the offset and divide by 2\n    if (attrsArr[(i - ATTRIBUTES_OFFSET) >> 1] !== arguments[i + 1]) {\n      attrsChanged = true;\n      break;\n    }\n  }\n\n  if (attrsChanged) {\n    for (i = ATTRIBUTES_OFFSET; i < arguments.length; i += 2) {\n      attrsArr[(i - ATTRIBUTES_OFFSET) >> 1] = arguments[i + 1];\n    }\n  }\n\n  return attrsChanged;\n};\n\n\n/**\n * Updates the newAttrs object for an Element.\n *\n * This function is called in the context of the Element and the arguments from\n * elementOpen-like function so that the arguments are not de-optimized.\n *\n * @this {Element} The Element to update newAttrs for.\n * @param {*} unused1\n * @param {*} unused2\n * @param {*} unused3\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n * @return {!Object<string, *>} The updated newAttrs object.\n */\nvar updateNewAttrs = function(unused1, unused2, unused3, var_args) {\n  var node = this;\n  var data = getData(node);\n  var newAttrs = data.newAttrs;\n\n  for (var attr in newAttrs) {\n    newAttrs[attr] = undefined;\n  }\n\n  for (var i = ATTRIBUTES_OFFSET; i < arguments.length; i += 2) {\n    newAttrs[arguments[i]] = arguments[i + 1];\n  }\n\n  return newAttrs;\n};\n\n\n/**\n * Updates the attributes for a given Element.\n * @param {!Element} node\n * @param {!Object<string,*>} newAttrs The new attributes for node\n */\nvar updateAttributes = function(node, newAttrs) {\n  for (var attr in newAttrs) {\n    updateAttribute(node, attr, newAttrs[attr]);\n  }\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document. This\n * corresponds to an opening tag and a elementClose tag is required.\n * @param {string} tag The element's tag.\n * @param {?string} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n */\nvar elementOpen = function(tag, key, statics, var_args) {\n  if (\"production\" !== 'production') {\n    assertNotInAttributes();\n  }\n\n  var node = alignWithDOM(tag, key, statics);\n\n  if (hasChangedAttrs.apply(node, arguments)) {\n    var newAttrs = updateNewAttrs.apply(node, arguments);\n    updateAttributes(node, newAttrs);\n  }\n\n  firstChild();\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document. This\n * corresponds to an opening tag and a elementClose tag is required. This is\n * like elementOpen, but the attributes are defined using the attr function\n * rather than being passed as arguments. Must be folllowed by 0 or more calls\n * to attr, then a call to elementOpenEnd.\n * @param {string} tag The element's tag.\n * @param {?string} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n */\nvar elementOpenStart = function(tag, key, statics) {\n  if (\"production\" !== 'production') {\n    assertNotInAttributes();\n    setInAttributes();\n  }\n\n  argsBuilder[0] = tag;\n  argsBuilder[1] = key;\n  argsBuilder[2] = statics;\n  argsBuilder.length = ATTRIBUTES_OFFSET;\n};\n\n\n/***\n * Defines a virtual attribute at this point of the DOM. This is only valid\n * when called between elementOpenStart and elementOpenEnd.\n *\n * @param {string} name\n * @param {*} value\n */\nvar attr = function(name, value) {\n  if (\"production\" !== 'production') {\n    assertInAttributes();\n  }\n\n  argsBuilder.push(name, value);\n};\n\n\n/**\n * Closes an open tag started with elementOpenStart.\n */\nvar elementOpenEnd = function() {\n  if (\"production\" !== 'production') {\n    assertInAttributes();\n    setNotInAttributes();\n  }\n\n  elementOpen.apply(null, argsBuilder);\n};\n\n\n/**\n * Closes an open virtual Element.\n *\n * @param {string} tag The element's tag.\n */\nvar elementClose = function(tag) {\n  if (\"production\" !== 'production') {\n    assertNotInAttributes();\n  }\n\n  parentNode();\n  nextSibling();\n};\n\n\n/**\n * Declares a virtual Element at the current location in the document that has\n * no children.\n * @param {string} tag The element's tag.\n * @param {?string} key The key used to identify this element. This can be an\n *     empty string, but performance may be better if a unique value is used\n *     when iterating over an array of items.\n * @param {?Array<*>} statics An array of attribute name/value pairs of the\n *     static attributes for the Element. These will only be set once when the\n *     Element is created.\n * @param {...*} var_args Attribute name/value pairs of the dynamic attributes\n *     for the Element.\n */\nvar elementVoid = function(tag, key, statics, var_args) {\n  if (\"production\" !== 'production') {\n    assertNotInAttributes();\n  }\n\n  elementOpen.apply(null, arguments);\n  elementClose.apply(null, arguments);\n};\n\n\n/**\n * Declares a virtual Text at this point in the document.\n *\n * @param {string} value The text of the Text.\n */\nvar text = function(value) {\n  if (\"production\" !== 'production') {\n    assertNotInAttributes();\n  }\n\n  var node = alignWithDOM('#text', null, value);\n  var data = getData(node);\n\n  if (data.text !== value) {\n    node.data = value;\n    data.text = value;\n  }\n\n  nextSibling();\n};\n\n\n/** */\nmodule.exports = {\n  elementOpenStart: elementOpenStart,\n  elementOpenEnd: elementOpenEnd,\n  elementOpen: elementOpen,\n  elementVoid: elementVoid,\n  elementClose: elementClose,\n  text: text,\n  attr: attr\n};\n\n\n},{\"./alignment\":3,\"./attributes\":4,\"./node_data\":5,\"./traversal\":8,\"./walker\":11}],11:[function(require,module,exports){\n/**\n * Copyright 2015 The Incremental DOM Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @type {TreeWalker}\n */\nvar walker_;\n\n\n/**\n * @return {TreeWalker} the current TreeWalker\n */\nvar getWalker = function() {\n  return walker_;\n};\n\n\n/**\n * Sets the current TreeWalker\n * @param {TreeWalker} walker\n */\nvar setWalker = function(walker) {\n  walker_ = walker;\n};\n\n\n/** */\nmodule.exports = {\n  getWalker: getWalker,\n  setWalker: setWalker\n};\n\n\n},{}],12:[function(require,module,exports){\n'use strict';\n\nfunction Query(elapsed, waiting, query) {\n  this.elapsed = elapsed;\n  this.waiting = waiting;\n  this.query = query;\n}\n\nQuery.rand = function() {\n  var elapsed = Math.random() * 15;\n  var waiting = Math.random() < 0.5;\n  var query = 'SELECT blah FROM something';\n\n  if (Math.random() < 0.2) {\n    query = '<IDLE> in transaction';\n  }\n\n  if (Math.random() < 0.1) {\n    query = 'vacuum';\n  }\n\n  return new Query(elapsed, waiting, query);\n};\n\nvar _nextId = 0;\nfunction Database(name) {\n  this.id = _nextId++;\n  this.name = name;\n  this.queries = null;\n\n  this.update();\n}\n\nDatabase.prototype.update = function() {\n  var queries = [];\n\n  var r = Math.floor((Math.random() * 10) + 1);\n  for (var j = 0; j < r; j++) {\n    queries.push(Query.rand());\n  }\n\n  this.queries = queries;\n};\n\nDatabase.prototype.getTopFiveQueries = function() {\n  var qs = this.queries.slice();\n  qs.sort(function(a, b) {\n    return a.elapsed - b.elapsed;\n  });\n  qs = qs.slice(0, 5);\n  while (qs.length < 5) {\n    qs.push(new Query(0.0, false, ''));\n  }\n  return qs;\n};\n\nmodule.exports = {\n  Query: Query,\n  Database: Database\n};\n\n},{}]},{},[1]);\n"],"sourceRoot":"/source/"}